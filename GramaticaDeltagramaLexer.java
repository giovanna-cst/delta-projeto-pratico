// Generated from java-escape by ANTLR 4.11.1
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class GramaticaDeltagramaLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.11.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ENT=1, SAI=2, OP_COMP=3, OP_LOG=4, TIPO=5, SE=6, SENAO=7, NUM_INT=8, NUM_REAL=9, 
		ENQ=10, OP_ARIT=11, OP_ATRI=12, PONT=13, ABRE_COMEN=14, FECHA_COMEN=15, 
		INI=16, FIM=17, AP=18, FP=19, VAR=20, WS=21;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"NUM", "LET", "ENT", "SAI", "OP_COMP", "OP_LOG", "TIPO", "SE", "SENAO", 
			"NUM_INT", "NUM_REAL", "ENQ", "OP_ARIT", "OP_ATRI", "PONT", "ABRE_COMEN", 
			"FECHA_COMEN", "INI", "FIM", "AP", "FP", "VAR", "WS"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'entrada:'", "'saida:'", null, null, null, "'se'", "'senao'", 
			null, null, "'enquanto:'", null, null, null, "'/\"'", "'\"/'", "'<'", 
			"'>'", "'('", "')'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "ENT", "SAI", "OP_COMP", "OP_LOG", "TIPO", "SE", "SENAO", "NUM_INT", 
			"NUM_REAL", "ENQ", "OP_ARIT", "OP_ATRI", "PONT", "ABRE_COMEN", "FECHA_COMEN", 
			"INI", "FIM", "AP", "FP", "VAR", "WS"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public GramaticaDeltagramaLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "GramaticaDeltagrama.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000\u0015\u00b8\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002"+
		"\u0001\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002"+
		"\u0004\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002"+
		"\u0007\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002"+
		"\u000b\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e"+
		"\u0002\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011"+
		"\u0002\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014"+
		"\u0002\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0001\u0000\u0001\u0000"+
		"\u0001\u0001\u0001\u0001\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0003\u0004S\b\u0004\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0003\u0005"+
		"[\b\u0005\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0003\u0006p\b\u0006\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\t\u0004"+
		"\t|\b\t\u000b\t\f\t}\u0001\n\u0004\n\u0081\b\n\u000b\n\f\n\u0082\u0001"+
		"\n\u0001\n\u0004\n\u0087\b\n\u000b\n\f\n\u0088\u0001\u000b\u0001\u000b"+
		"\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b"+
		"\u0001\u000b\u0001\u000b\u0001\f\u0001\f\u0001\r\u0001\r\u0001\u000e\u0001"+
		"\u000e\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u0010\u0001\u0010\u0001"+
		"\u0010\u0001\u0011\u0001\u0011\u0001\u0012\u0001\u0012\u0001\u0013\u0001"+
		"\u0013\u0001\u0014\u0001\u0014\u0001\u0015\u0001\u0015\u0001\u0015\u0005"+
		"\u0015\u00ac\b\u0015\n\u0015\f\u0015\u00af\t\u0015\u0001\u0016\u0005\u0016"+
		"\u00b2\b\u0016\n\u0016\f\u0016\u00b5\t\u0016\u0001\u0016\u0001\u0016\u0000"+
		"\u0000\u0017\u0001\u0000\u0003\u0000\u0005\u0001\u0007\u0002\t\u0003\u000b"+
		"\u0004\r\u0005\u000f\u0006\u0011\u0007\u0013\b\u0015\t\u0017\n\u0019\u000b"+
		"\u001b\f\u001d\r\u001f\u000e!\u000f#\u0010%\u0011\'\u0012)\u0013+\u0014"+
		"-\u0015\u0001\u0000\u0006\u0001\u000009\u0002\u0000AZaz\u0003\u0000*+"+
		"--//\u0002\u0000::==\u0005\u0000!!,,..;;??\u0003\u0000\t\n\r\r  \u00c2"+
		"\u0000\u0005\u0001\u0000\u0000\u0000\u0000\u0007\u0001\u0000\u0000\u0000"+
		"\u0000\t\u0001\u0000\u0000\u0000\u0000\u000b\u0001\u0000\u0000\u0000\u0000"+
		"\r\u0001\u0000\u0000\u0000\u0000\u000f\u0001\u0000\u0000\u0000\u0000\u0011"+
		"\u0001\u0000\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0000\u0000\u0015"+
		"\u0001\u0000\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0000\u0000\u0019"+
		"\u0001\u0000\u0000\u0000\u0000\u001b\u0001\u0000\u0000\u0000\u0000\u001d"+
		"\u0001\u0000\u0000\u0000\u0000\u001f\u0001\u0000\u0000\u0000\u0000!\u0001"+
		"\u0000\u0000\u0000\u0000#\u0001\u0000\u0000\u0000\u0000%\u0001\u0000\u0000"+
		"\u0000\u0000\'\u0001\u0000\u0000\u0000\u0000)\u0001\u0000\u0000\u0000"+
		"\u0000+\u0001\u0000\u0000\u0000\u0000-\u0001\u0000\u0000\u0000\u0001/"+
		"\u0001\u0000\u0000\u0000\u00031\u0001\u0000\u0000\u0000\u00053\u0001\u0000"+
		"\u0000\u0000\u0007<\u0001\u0000\u0000\u0000\tR\u0001\u0000\u0000\u0000"+
		"\u000bZ\u0001\u0000\u0000\u0000\ro\u0001\u0000\u0000\u0000\u000fq\u0001"+
		"\u0000\u0000\u0000\u0011t\u0001\u0000\u0000\u0000\u0013{\u0001\u0000\u0000"+
		"\u0000\u0015\u0080\u0001\u0000\u0000\u0000\u0017\u008a\u0001\u0000\u0000"+
		"\u0000\u0019\u0094\u0001\u0000\u0000\u0000\u001b\u0096\u0001\u0000\u0000"+
		"\u0000\u001d\u0098\u0001\u0000\u0000\u0000\u001f\u009a\u0001\u0000\u0000"+
		"\u0000!\u009d\u0001\u0000\u0000\u0000#\u00a0\u0001\u0000\u0000\u0000%"+
		"\u00a2\u0001\u0000\u0000\u0000\'\u00a4\u0001\u0000\u0000\u0000)\u00a6"+
		"\u0001\u0000\u0000\u0000+\u00a8\u0001\u0000\u0000\u0000-\u00b3\u0001\u0000"+
		"\u0000\u0000/0\u0007\u0000\u0000\u00000\u0002\u0001\u0000\u0000\u0000"+
		"12\u0007\u0001\u0000\u00002\u0004\u0001\u0000\u0000\u000034\u0005e\u0000"+
		"\u000045\u0005n\u0000\u000056\u0005t\u0000\u000067\u0005r\u0000\u0000"+
		"78\u0005a\u0000\u000089\u0005d\u0000\u00009:\u0005a\u0000\u0000:;\u0005"+
		":\u0000\u0000;\u0006\u0001\u0000\u0000\u0000<=\u0005s\u0000\u0000=>\u0005"+
		"a\u0000\u0000>?\u0005i\u0000\u0000?@\u0005d\u0000\u0000@A\u0005a\u0000"+
		"\u0000AB\u0005:\u0000\u0000B\b\u0001\u0000\u0000\u0000CD\u0005M\u0000"+
		"\u0000DE\u0005A\u0000\u0000EF\u0005I\u0000\u0000FG\u0005O\u0000\u0000"+
		"GS\u0005R\u0000\u0000HI\u0005M\u0000\u0000IJ\u0005E\u0000\u0000JK\u0005"+
		"N\u0000\u0000KL\u0005O\u0000\u0000LS\u0005R\u0000\u0000MN\u0005I\u0000"+
		"\u0000NO\u0005G\u0000\u0000OP\u0005U\u0000\u0000PQ\u0005A\u0000\u0000"+
		"QS\u0005L\u0000\u0000RC\u0001\u0000\u0000\u0000RH\u0001\u0000\u0000\u0000"+
		"RM\u0001\u0000\u0000\u0000S\n\u0001\u0000\u0000\u0000T[\u0005E\u0000\u0000"+
		"UV\u0005O\u0000\u0000V[\u0005U\u0000\u0000WX\u0005N\u0000\u0000XY\u0005"+
		"A\u0000\u0000Y[\u0005O\u0000\u0000ZT\u0001\u0000\u0000\u0000ZU\u0001\u0000"+
		"\u0000\u0000ZW\u0001\u0000\u0000\u0000[\f\u0001\u0000\u0000\u0000\\]\u0005"+
		"i\u0000\u0000]^\u0005n\u0000\u0000^p\u0005t\u0000\u0000_`\u0005d\u0000"+
		"\u0000`a\u0005o\u0000\u0000ab\u0005u\u0000\u0000bc\u0005b\u0000\u0000"+
		"cd\u0005l\u0000\u0000dp\u0005e\u0000\u0000ef\u0005b\u0000\u0000fg\u0005"+
		"o\u0000\u0000gh\u0005o\u0000\u0000hp\u0005l\u0000\u0000ij\u0005s\u0000"+
		"\u0000jk\u0005t\u0000\u0000kl\u0005r\u0000\u0000lm\u0005i\u0000\u0000"+
		"mn\u0005n\u0000\u0000np\u0005g\u0000\u0000o\\\u0001\u0000\u0000\u0000"+
		"o_\u0001\u0000\u0000\u0000oe\u0001\u0000\u0000\u0000oi\u0001\u0000\u0000"+
		"\u0000p\u000e\u0001\u0000\u0000\u0000qr\u0005s\u0000\u0000rs\u0005e\u0000"+
		"\u0000s\u0010\u0001\u0000\u0000\u0000tu\u0005s\u0000\u0000uv\u0005e\u0000"+
		"\u0000vw\u0005n\u0000\u0000wx\u0005a\u0000\u0000xy\u0005o\u0000\u0000"+
		"y\u0012\u0001\u0000\u0000\u0000z|\u0003\u0001\u0000\u0000{z\u0001\u0000"+
		"\u0000\u0000|}\u0001\u0000\u0000\u0000}{\u0001\u0000\u0000\u0000}~\u0001"+
		"\u0000\u0000\u0000~\u0014\u0001\u0000\u0000\u0000\u007f\u0081\u0003\u0001"+
		"\u0000\u0000\u0080\u007f\u0001\u0000\u0000\u0000\u0081\u0082\u0001\u0000"+
		"\u0000\u0000\u0082\u0080\u0001\u0000\u0000\u0000\u0082\u0083\u0001\u0000"+
		"\u0000\u0000\u0083\u0084\u0001\u0000\u0000\u0000\u0084\u0086\u0005.\u0000"+
		"\u0000\u0085\u0087\u0003\u0001\u0000\u0000\u0086\u0085\u0001\u0000\u0000"+
		"\u0000\u0087\u0088\u0001\u0000\u0000\u0000\u0088\u0086\u0001\u0000\u0000"+
		"\u0000\u0088\u0089\u0001\u0000\u0000\u0000\u0089\u0016\u0001\u0000\u0000"+
		"\u0000\u008a\u008b\u0005e\u0000\u0000\u008b\u008c\u0005n\u0000\u0000\u008c"+
		"\u008d\u0005q\u0000\u0000\u008d\u008e\u0005u\u0000\u0000\u008e\u008f\u0005"+
		"a\u0000\u0000\u008f\u0090\u0005n\u0000\u0000\u0090\u0091\u0005t\u0000"+
		"\u0000\u0091\u0092\u0005o\u0000\u0000\u0092\u0093\u0005:\u0000\u0000\u0093"+
		"\u0018\u0001\u0000\u0000\u0000\u0094\u0095\u0007\u0002\u0000\u0000\u0095"+
		"\u001a\u0001\u0000\u0000\u0000\u0096\u0097\u0007\u0003\u0000\u0000\u0097"+
		"\u001c\u0001\u0000\u0000\u0000\u0098\u0099\u0007\u0004\u0000\u0000\u0099"+
		"\u001e\u0001\u0000\u0000\u0000\u009a\u009b\u0005/\u0000\u0000\u009b\u009c"+
		"\u0005\"\u0000\u0000\u009c \u0001\u0000\u0000\u0000\u009d\u009e\u0005"+
		"\"\u0000\u0000\u009e\u009f\u0005/\u0000\u0000\u009f\"\u0001\u0000\u0000"+
		"\u0000\u00a0\u00a1\u0005<\u0000\u0000\u00a1$\u0001\u0000\u0000\u0000\u00a2"+
		"\u00a3\u0005>\u0000\u0000\u00a3&\u0001\u0000\u0000\u0000\u00a4\u00a5\u0005"+
		"(\u0000\u0000\u00a5(\u0001\u0000\u0000\u0000\u00a6\u00a7\u0005)\u0000"+
		"\u0000\u00a7*\u0001\u0000\u0000\u0000\u00a8\u00ad\u0003\u0003\u0001\u0000"+
		"\u00a9\u00ac\u0003\u0001\u0000\u0000\u00aa\u00ac\u0003\u0003\u0001\u0000"+
		"\u00ab\u00a9\u0001\u0000\u0000\u0000\u00ab\u00aa\u0001\u0000\u0000\u0000"+
		"\u00ac\u00af\u0001\u0000\u0000\u0000\u00ad\u00ab\u0001\u0000\u0000\u0000"+
		"\u00ad\u00ae\u0001\u0000\u0000\u0000\u00ae,\u0001\u0000\u0000\u0000\u00af"+
		"\u00ad\u0001\u0000\u0000\u0000\u00b0\u00b2\u0007\u0005\u0000\u0000\u00b1"+
		"\u00b0\u0001\u0000\u0000\u0000\u00b2\u00b5\u0001\u0000\u0000\u0000\u00b3"+
		"\u00b1\u0001\u0000\u0000\u0000\u00b3\u00b4\u0001\u0000\u0000\u0000\u00b4"+
		"\u00b6\u0001\u0000\u0000\u0000\u00b5\u00b3\u0001\u0000\u0000\u0000\u00b6"+
		"\u00b7\u0006\u0016\u0000\u0000\u00b7.\u0001\u0000\u0000\u0000\n\u0000"+
		"RZo}\u0082\u0088\u00ab\u00ad\u00b3\u0001\u0006\u0000\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}